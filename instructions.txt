
//d add r0, r1, r2 r0=r1+r2                                                          d 0 rs rt rd 0 0x20
//d sub r0, r1, r2 r0=r1-r2                                                          d 0 rs rt rd 0 0x22
//d addu r0, r1, r2 r0=r1+r2 (unsigned addition, not 2's complement)                 d 0 rs rt rd 0 0x21
//d subu r0,r1,r2 r0=r1-r2 (unsigned addition, not 2's complement)                   d 0 rs rt rd 0 0x23
//d and r0,r1,r2 r0= r1 & r2                                                         d 0 rs rt rd 0 0x24
//d or r0,r1,r2 r0=r1 | r2                                                           d 0 rs rt rd 0 0x25
//d not r0,r1 ro=r1                                                                  d 0 rs 0 rd 0 0x27 
//d xor, r0,r1,r2 r= r1 xor r2                                                       d 0 rs rt rd 0 0x26
//d sll r0, r1, 10 r0=r1<<10 (shift left logical)                                    d 0 rs rt rd shamt 0
//d srl r0, r1, 10 r0=r1>>10 (shift right logical)                                   d 0 rs rt rd shamt 2
//d sla r0, r1, 10 r0=r1<<10 (shift left arithmetic)                                 d 0 rs rt rd shamt 4                   
//d sra r0, r1, 10 r0=r1>>10 (shift right arithmetic)                                d 0 rs rt rd shamt 3
//d slt r0,r1,r2 if(r1<r2) r0=1 else r0=0                                            d 0 rs rt rd 0 0x2a
//d seq r0,r1,r2 if(r1=r2) r0=1 else r0=0                                            d 0 rs rt rd 0 0x2b 
//d mul r0,r1 hi=z[63:32],lo=z[31:0], Z=r0*r1                                        d 0 rs rt 0 0x18
//madd r0,r1 r0*r1 added with the value in the concatenated registers lo and hi.    0x1c rs rt 0 0
//maddu r0,r1 unsigned version of madd                                              0x1c rs rt 0 1




//addi r0,r1,1000 r0=r1+1000                                                      8 rs rt imm
//addiu r0,r1, 1000 r0=r1+1000 (unsigned additon, not 2's complement)             9 rs rt imm
//andi r0,r1, 1000 r0= r1 & 1000                                                  0xc rs rt imm
//ori r0,r1, 1000 r0= r1 | 1000                                                   0xd rs rt imm
//xori, r0,r1,1000 r0=r1 xor 1000                                                 0xe rs rt Imm
//slti r0,r1,100 if(r1<100) r0=1 else r0=0                                        0xa rs rt imm
//lw r0,10(r1) r0=Memory[r1+10] (load word)                                       0x23 rs rt Offset
//sw r0,10(r1) Memory[r1+10]=r0 (store word)                                      0x2b rs rt Offset
//lui r0, 1000 r0[31:16]=1000                                                     0xf O rt imm
//beq r0,r1,10 if(r0==r1) go to PC+4+10 (branch on equal)                         4 rs rt Offset
//bne r0,r1,10 if(r0!=r1) go to PC+4+10 (branch on not equal)                     5 rs rt Offset                                                 
//bgte r0,r1, 10 if(r0>=r1) go to PC+4+10 (branch if greter than or equal)        0x12 rs rt Offset      
//ble r0,r1, 10 if(r0<r1) go to PC+4+10 (branch if less than)                     0x13 rs rt Offset      
//bleq r0,r1, 10 if(r0<=r1) go to PC+4+10 (branch if less than or equal)          0x14 rs rt Offset          
//bleu r0,r1, 10 unsigned version of ble                                          0x15 rs rt Offset      
//bgtu r0,r1, 10 unsigned version of bgt                                          0x16 rs rt Offset    
//bgt r0,r1,10 if(r0>r1) go to PC+4+10 (branch if greater than)                   0x17 rs rt Offset   



//Unconditional Branch  
//j 10 jump to address 10                                                        2 target
//jr r0 jump to address stored in register r0                                   d 0 rs 0 8
//jal 10 ra=PC+4 and jump to address 10                                          3 target


//Floating point
//mfcl r0, f0 r0=f0                                                        0x11 0 rt fs 0
//mtc1 f0,r0 f0=r0                                                         0x11 4 rt fs 0
//add.s f0,f1, f2 f0=f1+f2                                                 0x11 0x10 ft fs fd 0
//sub.s f0,f1, f2 f0=f1-f2                                                 0x11 0x10 ft fs fd 1
//c.eq.s cc f0, f1 the flag cc is set to one if f0=f1                      0x11 0x10 ft fs cc 0 FC 2
//c.le.s cc f0, f1 the flag cc is set to one if f0<=f1                     0x11 0x10 ft fs cc 0 FC 0xe
//c.lt.s cc f0, f1 the flag cc is set to one if f0<f1                      0x11 0x10 ft fs cc 0 FC 0xc
//c.ge.s cc f0, f1 the flag cc is set to one if f0>=f1
//c.gt.s cc f0, f1 the flag cc is set to one if f0>f1
//mov.s cc f0, f1 f0=f1                                                    0x11 0x10 0 fs fd 6

